---
clusterName: "matatika-search"
nodeGroup: "master"

# The service that non master groups will try to connect to when joining the cluster
# This should be set to clusterName + "-" + nodeGroup for your master group
masterService: ""

# Elasticsearch roles that will be applied to this nodeGroup
# These will be set as environment variables. E.g. node.master=true
roles:
  master: "true"
  ingest: "true"
  data: "true"
  remote_cluster_client: "true"
  ml: "true"

replicas: 1
minimumMasterNodes: 1

esMajorVersion: ""

# Allows you to add any config files in /usr/share/elasticsearch/config/
# Set elasticsearch.yml in deploy script from matatika-catalog/elastic-search/config/elasticsearch.yml
# Set setup.sh in deploy script from matatika-catalog/elastic-search/config/setup.sh
# Set es_datasets_index_config.json in deploy script from matatika-catalog/elastic-search/config/es_datasets_index_config.json
# Set es_logstash_policy_config.json in deploy script from matatika-catalog/elastic-search/config/es_logstash_policy_config.json
# Set es_profiles_datasets_likes_index_config.json in deploy script from matatika-catalog/elastic-search/config/es_profiles_datasets_likes_index_config.json
#esConfig: {}

esJvmOptions: {}
#  processors.options: |
#    -XX:ActiveProcessorCount=3

# Extra environment variables to append to this nodeGroup
# This will be appended to the current 'env:' key. You can use any of the kubernetes env
# syntax here
extraEnvs:
  - name: ELASTIC_PASSWORD
    value: PLACEHOLDER see deployscript --set extraEnvs[0].value=${CATALOG_MATATIKA_ES_ELASTIC_PASSWORD}
  - name: path.repo
    value: /usr/share/elasticsearch/backups

# Allows you to load environment variables from kubernetes secret or config map
envFrom: []
# - secretRef:
#     name: env-secret
# - configMapRef:
#     name: config-map

# A list of secrets and their paths to mount inside the pod
# This is useful for mounting certificates for security and for mounting
# the X-Pack license
secretMounts: []
#  - name: elastic-certificates
#    secretName: elastic-certificates
#    path: /usr/share/elasticsearch/config/certs
#    defaultMode: 0755

hostAliases: []
#- ip: "127.0.0.1"
#  hostnames:
#  - "foo.local"
#  - "bar.local"

image: "docker.elastic.co/elasticsearch/elasticsearch"
imageTag: PLACEHOLDER_SET_IN_DEPLOY_SCRIPT
imagePullPolicy: "IfNotPresent"

podAnnotations: {}
# iam.amazonaws.com/role: es-cluster

# additionals labels
labels: {}

resources:
  requests:
    memory: 3Gi
    cpu: 250m
  limits:
    memory: 4Gi
    cpu: 2

initResources: {}
# limits:
#   cpu: "25m"
#   # memory: "128Mi"
# requests:
#   cpu: "25m"
#   memory: "128Mi"

networkHost: "0.0.0.0"

volumeClaimTemplate:
  accessModes: ["ReadWriteMany"]
  resources:
    requests:
      storage: 30Gi
  storageClassName: azurefile

rbac:
  create: false
  serviceAccountAnnotations: {}
  serviceAccountName: ""
  automountToken: true

podSecurityPolicy:
  create: false
  name: ""
  spec:
    privileged: true
    fsGroup:
      rule: RunAsAny
    runAsUser:
      rule: RunAsAny
    seLinux:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    volumes:
      - secret
      - configMap
      - persistentVolumeClaim
      - emptyDir

persistence:
  enabled: true
  labels:
    # Add default labels for the volumeClaimTemplate of the StatefulSet
    enabled: false
  annotations: {}

# share generated certs
extraVolumes:
- name: tls-certificates
  emptyDir: {}
- name: backups
  emptyDir: {}

# mount for the generated certs
extraVolumeMounts:
- name: tls-certificates
  mountPath: /usr/share/elasticsearch/config/certs
- name: backups
  mountPath: /usr/share/elasticsearch/backups

# define container to build the certs
extraInitContainers:
- name: setup-tls-cert
  image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
  command:
  - sh
  - -c
  - |
    #!/usr/bin/env bash
    set -euo pipefail
    if [ ! -f "/usr/share/elasticsearch/data/certs/ca/ca.crt" ]; then
      echo ${NODE_NAME},${POD_SERVICE_NAME},${POD_SERVICE_NAME_HEADLESS},${NODE_NAME}.${POD_SERVICE_NAME},${NODE_NAME}.${POD_SERVICE_NAME_HEADLESS}
      elasticsearch-certutil cert \
        --silent \
        --name ${NODE_NAME} \
        --ip ${POD_IP} \
        --dns localhost,${NODE_NAME},${POD_SERVICE_NAME},${POD_SERVICE_NAME_HEADLESS},${NODE_NAME}.${POD_SERVICE_NAME},${NODE_NAME}.${POD_SERVICE_NAME_HEADLESS} \
        --pass "" \
        --out $ES_PATH_CONF/certs/keystore.p12
      # create CA for clients to verify certificates
      mkdir -p $ES_PATH_CONF/certs/ca
      openssl pkcs12 -in $ES_PATH_CONF/certs/keystore.p12 -out $ES_PATH_CONF/certs/ca/ca.crt -clcerts -nokeys -passin pass:""
      # save for later, do not re-create certs on restart
      cp -R $ES_PATH_CONF/certs /usr/share/elasticsearch/data/certs
    else
      cp -R /usr/share/elasticsearch/data/certs/* $ES_PATH_CONF/certs
    fi
  env:
  - name: ES_PATH_CONF
    value: /usr/share/elasticsearch/config
  - name: NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: POD_SERVICE_NAME
    value: "matatika-search-master.example.svc.cluster.local"
  - name: POD_SERVICE_NAME_HEADLESS
    value: "matatika-search-master-headless.example.svc.cluster.local"
  volumeMounts:
  - name: tls-certificates
    mountPath: /usr/share/elasticsearch/config/certs
  - name: matatika-search-master
    mountPath: /usr/share/elasticsearch/data

# This is the PriorityClass settings as defined in
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: ""

# By default this will make sure two pods don't end up on the same node
# Changing this to a region would allow you to spread pods across regions
antiAffinityTopologyKey: "kubernetes.io/hostname"

# Hard means that by default pods will only be scheduled if there are enough nodes for them
# and that they will never end up on the same node. Setting this to soft will do this "best effort"
antiAffinity: "hard"

# This is the node affinity settings as defined in
# https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature
nodeAffinity: {}

# The default is to deploy all pods serially. By setting this to parallel all pods are started at
# the same time when bootstrapping the cluster
podManagementPolicy: "Parallel"

# The environment variables injected by service links are not used, but can lead to slow Elasticsearch boot times when
# there are many services in the current namespace.
# If you experience slow pod startups you probably want to set this to `false`.
enableServiceLinks: true

protocol: https
httpPort: 9200
transportPort: 9300

service:
  enabled: true
  labels: {}
  labelsHeadless: {}
  type: ClusterIP
  nodePort: ""
  annotations: {}
  httpPortName: http
  transportPortName: transport
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: ""

updateStrategy: RollingUpdate

# This is the max unavailable setting for the pod disruption budget
# The default value of 1 will make sure that kubernetes won't allow more than 1
# of your pods to be unavailable during maintenance
maxUnavailable: 1

podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# How long to wait for elasticsearch to stop gracefully
terminationGracePeriod: 120

sysctlVmMaxMapCount: 262144

readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 3
  timeoutSeconds: 5

# https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html#request-params wait_for_status
clusterHealthCheckParams: "wait_for_status=yellow&timeout=1s"

## Use an alternate scheduler.
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""

imagePullSecrets: []
nodeSelector:
  agentpool: "nodepool2"
tolerations: []

# Enabling this will publicly expose your Elasticsearch instance.
# Only enable this if you have security enabled on your cluster
ingress:
  enabled: false

nameOverride: ""
fullnameOverride: ""
healthNameOverride: ""

lifecycle:
  postStart:
    exec:
      command:
      - bash
      - -c
      - |
        #!/bin/bash
        export MATATIKA_ES_ELASTIC_PASSWORD=$ELASTIC_PASSWORD
        export MATATIKA_ES_BASE_URI=https://localhost:9200
        export ES_PATH_CONF=/usr/share/elasticsearch/config
        # debug
        echo $MATATIKA_ES_BASE_URI >> /tmp/message
        # debug
        ls -al $ES_PATH_CONF >> /tmp/message
        while [[ "$(curl -k -s --user elastic:$MATATIKA_ES_ELASTIC_PASSWORD -o /dev/null -w '%{http_code}\n' $MATATIKA_ES_BASE_URI)" != "200" ]]; do sleep 1; done
        cp $ES_PATH_CONF/setup.sh /tmp/setup.sh
        cp $ES_PATH_CONF/*.json /tmp/
        ls -al /tmp
        chmod +x /tmp/setup.sh
        /tmp/setup.sh
# preStop:
#   exec:
#     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]

sysctlInitContainer:
  enabled: true

keystore: []

networkPolicy:

  http:
    enabled: false
