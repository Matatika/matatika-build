# =====================================
# = Catalog configuration
# =====================================
app.url=http://localhost:8080
catalog.url=http://localhost:8080/api
catalog.docsBaseUrl=https://www.matatika.com/docs
catalog.websiteBaseUrl=https://www.matatika.com
catalog.allowed.origins=http://localhost:8080,https://example.matatika.com
catalog.allowed.domains=
catalog.streaming.connections=${CATALOG_STREAMING_CONNECTIONS:50}
catalog.data.queryTimeout=${CATALOG_DATA_QUERYTIMEOUT:15}

# =====================================
# = Encryption Configuration
# =====================================
jasypt.encryptor.password=${MATATIKA_ENCRYPTOR_PASSWORD}

# =====================================
# = Catalog persistence
# =====================================
persistence.catalog.driverClassName=org.postgresql.Driver
persistence.catalog.url=${PERSISTENCE_CATALOG_URL}
persistence.catalog.username=${PERSISTENCE_CATALOG_USERNAME}
persistence.catalog.password=${PERSISTENCE_CATALOG_PASSWORD}
persistence.catalog.maximum-pool-size=${PERSISTENCE_CATALOG_MAXIMUM_POOL_SIZE:50}
persistence.catalog.leakDetectionThreshold=60000
persistence.hibernate.show_sql=false
persistence.hibernate.hbm2ddl.auto=update

# =====================================
# = Catalog warehouse (multi-tenant)
# =====================================
persistence.warehouse.driverClassName=org.postgresql.Driver
persistence.warehouse.url=${PERSISTENCE_WAREHOUSE_URL}
persistence.warehouse.username=${PERSISTENCE_WAREHOUSE_USERNAME}
persistence.warehouse.password=${PERSISTENCE_WAREHOUSE_PASSWORD}
persistence.warehouse.maximum-pool-size=${PERSISTENCE_WAREHOUSE_MAXIMUM_POOL_SIZE:20}
persistence.warehouse.maxDataSources=${PERSISTENCE_WAREHOUSE_MAX_DATA_SOURCES:10}
persistence.warehouse.leakDetectionThreshold=60000

# =====================================
# = Scheduler configuration
# =====================================
scheduler.enabled=true

# =====================================
# = GitHub app configuration
# =====================================
github.api.enabled=false
github.api.repoPrefix=
github.api.privateRepo=false
github.api.appId=
github.api.privateKey=${GITHUB_API_PRIVATE_KEY:}
github.api.installationId=
github.api.workspacesAppId=
github.api.workspacesPrivateKey=${GITHUB_API_WORKSPACES_PRIVATE_KEY:}

# =====================================
# = OAuth Google 'Catalog' client
# =====================================
oauth2-google.clientId=<google_clientId>
oauth2-google.clientSecret=<google_clientSecret>

# =====================================
# = OAuth Trello 'Catalog' client
# =====================================
oauth-trello.consumerKey=<consumerKey>
oauth-trello.consumerSecret=<consumerSecret>

# =====================================
# = Email service implementation
# =====================================
emailService.implementation=sendgrid

# =====================================
# = SendGrid mail service configuration
# =====================================
sendgrid.api.key=<sengridApiKey>
sendgrid.source.email=support@matatika.com
sendgrid.bypass.emails=

# =====================================
# = Spring cloud dataflow configuration
# =====================================
dataflow.enabled=true
dataflow.dockerRegistry=docker.io
dataflow.shellTaskName=matatika-catalog-shelltask-docker
dataflow.catalogAccount=catalog
dataflow.pipelineAccount=pipeline
dataflow.task.maximum-concurrent-tasks=2
spring.cloud.dataflow.task.platform.kubernetes.accounts.catalog.namespace=example-tasks
#spring.cloud.dataflow.task.platform.kubernetes.accounts.catalog.imagePullSecret=matatika-catalog-acr-secret
#spring.cloud.dataflow.task.platform.kubernetes.accounts.catalog.nodeSelector=agentpool:nodepool2
spring.cloud.dataflow.task.platform.kubernetes.accounts.catalog.environmentVariables=MATATIKA_LOGSTASH_ENDPOINT=${MATATIKA_LOGSTASH_ENDPOINT:}\
  ,MATATIKA_ENCRYPTOR_PASSWORD=${MATATIKA_ENCRYPTOR_PASSWORD}\
  ,JAVA_OPTS=-XX:MaxMetaspaceSize=128M -XX:ReservedCodeCacheSize=64M -Xss1M -Xmx128M
spring.cloud.dataflow.task.platform.kubernetes.accounts.catalog.requests.cpu: .25
spring.cloud.dataflow.task.platform.kubernetes.accounts.catalog.requests.memory: 768Mi
#spring.cloud.dataflow.task.platform.kubernetes.accounts.catalog.limits.cpu: .5
spring.cloud.dataflow.task.platform.kubernetes.accounts.catalog.limits.memory: 768Mi
spring.cloud.dataflow.task.platform.kubernetes.accounts.pipeline.namespace=example-tasks
#spring.cloud.dataflow.task.platform.kubernetes.accounts.pipeline.imagePullSecret=matatika-catalog-acr-secret
#spring.cloud.dataflow.task.platform.kubernetes.accounts.pipeline.nodeSelector=agentpool:nodepool2
spring.cloud.dataflow.task.platform.kubernetes.accounts.pipeline.environmentVariables=MATATIKA_LOGSTASH_ENDPOINT=${MATATIKA_LOGSTASH_ENDPOINT:}\
  ,MATATIKA_ENCRYPTOR_PASSWORD=${MATATIKA_ENCRYPTOR_PASSWORD}\
  ,JAVA_OPTS=-XX:MaxMetaspaceSize=128M -XX:ReservedCodeCacheSize=64M -Xss1M -Xmx128M
spring.cloud.dataflow.task.platform.kubernetes.accounts.pipeline.requests.cpu: .25
spring.cloud.dataflow.task.platform.kubernetes.accounts.pipeline.requests.memory: 1024Mi
spring.cloud.dataflow.task.platform.kubernetes.accounts.pipeline.limits.cpu: 2
spring.cloud.dataflow.task.platform.kubernetes.accounts.pipeline.limits.memory: 2048Mi

# ===============================
# = catalog auth configuration
# ===============================
spring.security.oauth2.resourceserver.jwt.enabled=true
catalog.auth.idps.primary.issuer-uri=https://identity.matatika.com/
catalog.auth.idps.primary.audience=http://localhost:8080/api
catalog.auth.idps.primary.jwk-cache-ttl=PT120m
catalog.auth.idps.primary.jwk-cache-refresh=PT60m
catalog.auth.idps.primary.jwk-set-uri=https://identity.matatika.com/.well-known/jwks.json
catalog.auth.idps.secondary.issuer-uri=https://matatika.eu.auth0.com/
catalog.auth.idps.secondary.audience=http://localhost:8080/api
catalog.auth.idps.secondary.jwk-cache-ttl=PT120m
catalog.auth.idps.secondary.jwk-cache-refresh=PT60m
catalog.auth.idps.secondary.jwk-set-uri=https://matatika.eu.auth0.com/.well-known/jwks.json
catalog.auth.idps.local.issuer-uri=http://localhost:8080/
catalog.auth.idps.local.audience=http://localhost:8080/api
catalog.auth.idps.local.secret-key=${MATATIKA_AUTH_LOCAL_SECRET:}

# =====================================
# = Debug / management endpoints
# =====================================
management.endpoints.web.exposure.include=health,info
# only check db available, we can run in a degraded state without elasticsearch
management.endpoint.health.group.readiness.include=readinessState,db

#
# Event processing logging
#
logging.level.com.matatika.catalog.config.AsyncConfiguration=DEBUG
logging.level.com.matatika.catalog.event=DEBUG
logging.level.INTEGRATION_LOGGER=INFO
